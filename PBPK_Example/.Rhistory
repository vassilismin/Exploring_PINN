Ntot <- sum(N_obs)
# Initialise the consolidated discrepancy index
Ic <-0
for (i in 1:Ncomp){
# Give weight to compartments with more observations (more information)
Ic <- Ic +  I[i]* N_obs[i]/Ntot
}
# Name the list of compartment discrepancy indices
if ( !is.null(comp.names)){
names(I) <- comp.names
}else if (!is.null(names(observed))){
names(I) <- names(observed)
} else if (!is.null(names(predicted)) && is.null(comp.names) ){
names(I) <- names(predicted)
}
return(Ic)
#return(list(Total_index = Ic, Compartment_index= I))
}
#  absolute average fold error
AAFE <- function(predictions, observations, times=NULL){
y_obs <- unlist(observations)
y_pred <- unlist(predictions)
# Total number of observations
N<- length(y_obs)
log_ratio <- rep(NA, N)
for ( i in 1:N){
log_ratio[i] <- abs(log((y_pred[i]/y_obs[i]), base = 10))
}
aafe <- 10^(sum(log_ratio)/N)
return(aafe)
}
#====================
# Objective Function
#====================
obj.func <- function(x){
x <- exp(x)
x <- as.numeric(x)
substance_specific <- c("kup_gills"=x[4],
"kup_int"=x[2] ,
"kup_li"=x[3] ,
"kup_br"=x[1] ,
"kup_spl"=x[3] ,
"kup_muscle"=x[1],
"Ku_max"=x[5],
"P_li_bile"=x[6],
"Km"=x[7],
"kre"=x[8],
"kup_skin" = x[1],
"kup_rob" = x[2],
"kup_ht" = x[1],
"kup_ki" = x[2])
params <- list()
for (i in 1:length(params_list)) {
params[[i]] <- c(params_list[[i]],substance_specific)
}
try(solution1 <- ode(times = sample_time,  func = ode.func, y = inits1, parms = params,
events = events1, method="lsodes",rtol = 1e-3, atol = 1e-3),
silent = TRUE)
try(solution2 <- ode(times = sample_time,  func = ode.func, y = inits2, parms = params,
events = events2, method="lsodes",rtol = 1e-3, atol = 1e-3),
silent = TRUE)
# Here we implement a barrier function, thus a solver that can handle
# discontinious functions should be used
rest_comps <- c("C_blood", "C_ht", "C_skin", "C_rob", "C_ki")
rest_comps_low <- solution1[,rest_comps]
rest_comps_high <- solution2[,rest_comps]
threshold <- max(data_10)
if(dim(solution1)[1] != length(sample_time) | dim(solution2)[1] != length(sample_time)){
discrepancy <- Inf
}else if(any(rest_comps_low > threshold) | any(rest_comps_high > threshold)){
discrepancy <- 999999999
}else{
Concentrations_low <- matrix(NA, nrow = length(Time), ncol = 6)
Concentrations_high <- Concentrations_low
comp_names <- c("C_gills", "C_int", "C_li", "C_br", "C_spl", "C_muscle")
for (i in 1:length(Time)) {
Concentrations_low[i,] <- solution1[which(sample_time==Time[i]),comp_names]
Concentrations_high[i,] <- solution2[which(sample_time==Time[i]),comp_names]
}
colnames(Concentrations_low) <- comp_names
colnames(Concentrations_high) <- comp_names
observed_1 <- list()
observed_2 <- list()
predicted_1 <- list()
predicted_2 <- list()
# Remove the outliers from the low concentration data
for (i in 1:dim(Concentrations_low)[2]) {
if(names(data_10)[i] == "Muscle"){
observed_1[[i]] <- data_10[,i][-2]
predicted_1[[i]] <- Concentrations_low[,i][-2] # Remove the 2nd muscle point
}else if(names(data_10)[i] == "Spleen"){
observed_1[[i]] <- data_10[,i][-c(3,4)]
predicted_1[[i]] <- Concentrations_low[,i][-c(3,4)] # remove the 3rd and 4th spleen points
}else{
observed_1[[i]] <- data_10[,i]
predicted_1[[i]] <- Concentrations_low[,i]
}
}
observed_1[[2]][5] <- 1e-05
# Remove the outliers from the high concentration data
for (i in 1:dim(Concentrations_high)[2]) {
if(names(data_100)[i] == "Muscle"){
observed_2[[i]] <- data_100[,i][-c(2,4)]
predicted_2[[i]] <- Concentrations_high[,i][-c(2,4)] # Remove the 2nd and 4th muscle point
}else if(names(data_100)[i] == "Spleen"){
observed_2[[i]] <- data_100[,i][-c(4)]
predicted_2[[i]] <- Concentrations_high[,i][-c(4)] # remove the 4th spleen point
}else{
observed_2[[i]] <- data_100[,i]
predicted_2[[i]] <- Concentrations_high[,i]
}
}
comp_names <- c("Gill","Intestine","Liver",  "Brain","Spleen", "Muscle")
names(predicted_1) <- comp_names
names(predicted_2) <-names(predicted_1)
discrepancy <- (AAFE(predicted_1, observed_1) + AAFE( predicted_2, observed_2))/2
}
return(discrepancy)
}
#=================
#  Prepare input
#=================
inits1 <- create.inits(params_list[[1]],10)
inits2 <- create.inits(params_list[[1]],100)
events1 <- create.events(food_plan,2)
events2 <- create.events(food_plan,3)
sample_time <- sort(c(my_times))#,food_data[,1])) #hours
Time <- c(2,4,6,8,10)*7*24
#==============================
# Nelder - Mead optimization
#==============================
# Grouping by Bachler et al.2014
# 1: brain, heart, skin, muscle, rob -> kup_br_ht_skin_bone
# 2: intestines, kidneys -> kup_int_ki
# 3: liver, sple -> kup_li_spl
# 4: Gills -> kup_gills
# Take the seed
set.seed(seeds)
x0 <- c(log(exp(runif(8, -10, 7))))
names(x0) <- c("kup_1", "kup_2", "kup_3", "kup_4",
"Ku_max", "P_li_bile", "Km",
"kre")
N_iter <- 10
opts <- list( "algorithm" = "NLOPT_LN_NEWUOA", # "NLOPT_LN_SBPLX"
"xtol_rel" = 0.0,
"ftol_rel" = 0.0,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = N_iter)
start_time <- Sys.time()
try(
optimization <- nloptr::nloptr( x0 = x0,
eval_f = obj.func,
lb	= rep(-30, length(x0)),
ub = rep(30, length(x0)),
opts = opts),
silent = TRUE
)
if(!exists("optimization")){
fitness_value <- -100
params <-  c(log(exp(runif(8, -100000, -10000))))
}else{
fitness_value <-  optimization$objective
params <- exp(optimization$solution)
}
end_time <- Sys.time()
duration <- round(end_time-start_time,1)
#####################################################
return(list(seed = seeds, Index_opt = fitness_value,
parameter = params,
duration = duration))
}
seeds <- as.numeric(sample(1:1e+6,4))
library(parallel)
start_time <- Sys.time()
numCores <- detectCores()
cl <- makeCluster(numCores-2)
#clusterExport(cl, c("seeds"))
output <- parLapply(cl, seeds, main_func)
stopCluster(cl)
load("~/GitHub/PBPK_models/Rainbow Trout PBPK/ReModel/3. Fit on Ramsden et al 2009/Both_Concentrations/Rainbow_trout_results_Both_concentrations_Parallel_NLOPTR_PBKOF.RData")
output
load("~/GitHub/PBPK_models/Rainbow Trout PBPK/ReModel/3. Fit on Ramsden et al 2009/Both_Concentrations/Dietary_ReModel_Both_Bounded.RData")
Total_cost <- 10500
init_cost <- 2500
N_doses <- 72
dose_cost <- 166
Total_cost_loan <- init_cost + N_doses*dose_cost
Total_cost
Total_cost_loan
214*48
214*48 +2100
init_cost <- 2500
N_doses <- 72
dose_cost <- 145
Total_cost_loan <- init_cost + N_doses*dose_cost
Total_cost_loan
init_cost <- 3500
N_doses <- 72
dose_cost <- 135
Total_cost_loan <- init_cost + N_doses*dose_cost
Total_cost_loan
init_cost <- 2500
N_doses <- 72
dose_cost <- 155
Total_cost_loan <- init_cost + N_doses*dose_cost
Total_cost_loan
3500+34*233
3500+72*135
3500+72*185
load("~/GitHub/PBPK_models/Rainbow Trout PBPK/CO2_high/Uptake_Linear/Uptake_Linear_ramsden_bioavailability_no_control_no_enterohepatic.RData")
sample_time
inits1
x0
x<-x0
x
x <- exp(x)
x <- as.numeric(x)
x
substance_specific <- c("kup_br"=x[1] ,
"kup_int"=x[2] ,
"kup_rob" = x[2],
"kup_ki" = x[2],
"kup_li"=x[3] ,
"kup_gills"=x[4],
"kup_spl"=x[5] ,
"kup_muscle"=x[6],
"kup_skin" = x[6],
"kup_ht" = x[6],
"P_li_bile"=x[7],
"k_eg" = x[8],
"f_bioav_low" = x[9],
"f_bioav_high" = x[10],
"kup" =  0.002895315 ,
"kre"= 0.232795752)
substance_specific
params <- list()
for (i in 1:length(params_list)) {
params[[i]] <- c(params_list[[i]],substance_specific)
}
params[[1]]
conc <- "low"
solution1 <-  deSolve::ode(times = sample_time,  func = ode.func, y = inits1, parms = params,
method="lsodes",rtol = 1e-3, atol = 1e-3, conc=conc, food_plan=food_plan)
head(solution1)
if(dim(solution1)[1] != length(sample_time) | dim(solution2)[1] != length(sample_time)){
discrepancy <- Inf
}else{
Concentrations_low <- matrix(NA, nrow = length(Time), ncol = 6)
Concentrations_high <- Concentrations_low
comp_names <- c("C_gills", "C_int", "C_li", "C_br", "C_spl", "C_muscle")
for (i in 1:length(Time)) {
Concentrations_low[i,] <- solution1[which(sample_time==Time[i]),comp_names]
Concentrations_high[i,] <- solution2[which(sample_time==Time[i]),comp_names]
}
colnames(Concentrations_low) <- comp_names
colnames(Concentrations_high) <- comp_names
observed_1 <- list()
observed_2 <- list()
predicted_1 <- list()
predicted_2 <- list()
predicted_1
if(dim(solution1)[1] != length(sample_time) | dim(solution2)[1] != length(sample_time)){
discrepancy <- Inf
}else{
Concentrations_low <- matrix(NA, nrow = length(Time), ncol = 6)
Concentrations_high <- Concentrations_low
comp_names <- c("C_gills", "C_int", "C_li", "C_br", "C_spl", "C_muscle")
for (i in 1:length(Time)) {
Concentrations_low[i,] <- solution1[which(sample_time==Time[i]),comp_names]
Concentrations_high[i,] <- solution2[which(sample_time==Time[i]),comp_names]
}
colnames(Concentrations_low) <- comp_names
colnames(Concentrations_high) <- comp_names
observed_1 <- list()
observed_2 <- list()
predicted_1 <- list()
predicted_2 <- list()
# Remove the data that don't follow a trend from the low concentration data
for (i in 1:dim(Concentrations_low)[2]) {
if(names(data_10)[i] == "Muscle"){
observed_1[[i]] <- data_10[,i][-2]
predicted_1[[i]] <- Concentrations_low[,i][-2] # Remove the 2nd muscle point
}else if(names(data_10)[i] == "Spleen"){
observed_1[[i]] <- data_10[,i][-c(3,4)]
predicted_1[[i]] <- Concentrations_low[,i][-c(3,4)] # remove the 3rd and 4th spleen points
}else{
observed_1[[i]] <- data_10[,i]
predicted_1[[i]] <- Concentrations_low[,i]
}
}
predicted_1
conc <- "low"
try(solution1 <-  deSolve::ode(times = sample_time,  func = ode.func, y = inits1, parms = params,
method="lsodes",rtol = 1e-3, atol = 1e-3, conc=conc, food_plan=food_plan),
silent = TRUE)
conc <- "high"
try(solution2 <- deSolve::ode(times = sample_time,  func = ode.func, y = inits2, parms = params,
method="lsodes",rtol = 1e-3, atol = 1e-3, conc=conc, food_plan=food_plan),
silent = TRUE)
if(dim(solution1)[1] != length(sample_time) | dim(solution2)[1] != length(sample_time)){
discrepancy <- Inf
}else{
Concentrations_low <- matrix(NA, nrow = length(Time), ncol = 6)
Concentrations_high <- Concentrations_low
comp_names <- c("C_gills", "C_int", "C_li", "C_br", "C_spl", "C_muscle")
for (i in 1:length(Time)) {
Concentrations_low[i,] <- solution1[which(sample_time==Time[i]),comp_names]
Concentrations_high[i,] <- solution2[which(sample_time==Time[i]),comp_names]
}
colnames(Concentrations_low) <- comp_names
colnames(Concentrations_high) <- comp_names
observed_1 <- list()
observed_2 <- list()
predicted_1 <- list()
predicted_2 <- list()
# Remove the data that don't follow a trend from the low concentration data
for (i in 1:dim(Concentrations_low)[2]) {
if(names(data_10)[i] == "Muscle"){
observed_1[[i]] <- data_10[,i][-2]
predicted_1[[i]] <- Concentrations_low[,i][-2] # Remove the 2nd muscle point
}else if(names(data_10)[i] == "Spleen"){
observed_1[[i]] <- data_10[,i][-c(3,4)]
predicted_1[[i]] <- Concentrations_low[,i][-c(3,4)] # remove the 3rd and 4th spleen points
}else{
observed_1[[i]] <- data_10[,i]
predicted_1[[i]] <- Concentrations_low[,i]
}
}
# Remove the data that don't follow a trend from the high concentration data
for (i in 1:dim(Concentrations_high)[2]) {
if(names(data_100)[i] == "Muscle"){
observed_2[[i]] <- data_100[,i][-c(2,4)]
predicted_2[[i]] <- Concentrations_high[,i][-c(2,4)] # Remove the 2nd and 4th muscle point
}else if(names(data_100)[i] == "Spleen"){
observed_2[[i]] <- data_100[,i][-c(4)]
predicted_2[[i]] <- Concentrations_high[,i][-c(4)] # remove the 4th spleen point
}else{
observed_2[[i]] <- data_100[,i]
predicted_2[[i]] <- Concentrations_high[,i]
}
}
comp_names <- c("Gill","Intestine","Liver",  "Brain","Spleen", "Muscle")
names(predicted_1) <- comp_names
names(predicted_2) <-names(predicted_1)
#discrepancy <- (fitness.metric(observed_1, predicted_1) + fitness.metric(observed_2, predicted_2))/2
discrepancy <- (AAFE(predicted_1, observed_1) + AAFE( predicted_2, observed_2))/2
}
predicted_2
observed_1
21*24
2780/1.24
2521/1.24
load("~/GitHub/PBPK_Genetic_Algorithm/Kreyling/FPG.RData")
GA_results
load("~/GitHub/PBPK_Genetic_Algorithm/Kreyling/NLOPTR/FPG_nloptr.RData")
load("~/GitHub/PBPK_Genetic_Algorithm/Kreyling/NLOPTR/FPG_nloptr.RData")
GA_results <- GA::ga(type = "real", fitness = ga_fitness,
lower = rep(1,16), upper = rep(8.999999,16),
population = "gareal_Population",
selection = "gareal_lsSelection",
crossover = "gareal_laCrossover",
mutation = "gareal_raMutation",
popSize =  60, #the population size.
pcrossover = 0.85, #the probability of crossover between pairs of chromosomes.
pmutation = 0.4, #the probability of mutation in a parent chromosome
elitism = 5, #the number of best fitness individuals to survive at each generation.
maxiter = 200, #the maximum number of iterations to run before the GA search is halted.
run = 50, # the number of consecutive generations without any improvement
#in the best fitness value before the GA is stopped.
keepBest = TRUE, # best solutions at each iteration should be saved in a slot called bestSol.
parallel = (parallel::detectCores()),
monitor =plot,
seed = 8080)
GA_results
22.7/0.599
library(deSolve)
setwd("C:/Users/vassi/Documents/LAB/Giannis_project")
#===================
#   Load data
#===================
df <- openxlsx::read.xlsx("data.xlsx", sheet = 1, colNames = T, rowNames = F)
colnames(df) <- c("Year", "T", "H")
ode.func <- function(time, inits, params){
with(as.list(c(inits, params)),{
dT <- a11*T + a12*H + C1
dH <- a21*T + a22*H + C2
return(list(c(dT, dH)))
})
}
# Input
inits <- as.numeric(df[1,c(2:3)]) # Initial conditions
names(inits) <- c("T", "H")
sample_time <- df[,1] # Time points
# solution <- ode(times = sample_time,  func = ode.func,
#                 y = inits, parms = params,
#                 method="lsodes",rtol = 1e-5, atol = 1e-5)
a <- seq(1,10)
b <- seq(1,10) + 0.5
MSE <- function(y_obs, y_pred){
return(sqrt(mean((y_pred - y_obs)^2)))
}
# a <- seq(1,10)
# b <- seq(1,10) + 0.5
#Metrics::rmse(a,b)
#MSE(a,b)
x0 <- c("a11" = 0.8337, "a12" = 0.0072, "a21"=0.3441,
"a22" = 0.996, "C1" = 0.0083, "C2" = 0.2234)/1000
optimization <- dfoptim::nmk(fn = objective_func, par = x0,
control = list("maxfeval"=2000))
x<-x0
params <- x
names(params) <- c("a11", "a12", "a21",
"a22", "C1", "C2")
solution <- data.frame(ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
method="lsodes",rtol = 1e-5, atol = 1e-5))
class(solution$T)
T_pred <- class(solution$T) #solution[,2]
T_obs <- df$T
T_MSE <- MSE(T_pred, T_obs)
T_pred <-solution$T #solution[,2]
T_obs <- df$T
T_MSE <- MSE(T_pred, T_obs)
H_pred <- solution$H
H_obs <- df$H
H_MSE <- MSE(H_pred, H_obs)
library(deSolve)
setwd("C:/Users/vassi/Documents/LAB/Giannis_project")
#===================
#   Load data
#===================
df <- openxlsx::read.xlsx("data.xlsx", sheet = 1, colNames = T, rowNames = F)
colnames(df) <- c("Year", "T", "H")
ode.func <- function(time, inits, params){
with(as.list(c(inits, params)),{
dT <- a11*T + a12*H + C1
dH <- a21*T + a22*H + C2
return(list(c(dT, dH)))
})
}
# Input
inits <- as.numeric(df[1,c(2:3)]) # Initial conditions
names(inits) <- c("T", "H")
sample_time <- df[,1] # Time points
MSE <- function(y_obs, y_pred){
return(sqrt(mean((y_pred - y_obs)^2)))
}
# A test for the MSE function
# a <- seq(1,10)
# b <- seq(1,10) + 0.5
#Metrics::rmse(a,b)
#MSE(a,b)
objective_func <- function(x){
params <- x
names(params) <- c("a11", "a12", "a21",
"a22", "C1", "C2")
solution <- data.frame(ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
method="lsodes",rtol = 1e-5, atol = 1e-5))
T_pred <-solution$T #solution[,2]
T_obs <- df$T
T_MSE <- MSE(T_pred, T_obs)
H_pred <- solution$H
H_obs <- df$H
H_MSE <- MSE(H_pred, H_obs)
Total_MSE <- H_MSE + T_MSE
return(Total_MSE)
}
x0 <- c("a11" = 0.8337, "a12" = 0.0072, "a21"=0.3441,
"a22" = 0.996, "C1" = 0.0083, "C2" = 0.2234)/1000
optimization <- dfoptim::nmk(fn = objective_func, par = x0,
control = list("maxfeval"=2000))
optimum_parameters <- optimization$par # optimium values of parameters
names(optimum_parameters) <-c("a11", "a12", "a21", "a22", "C1", "C2")
optimum_obj_value <- optimization$value # optimal value of objective dunction
#=============================================================================
# Solve the ODEs system given the optimum parameter values
#sample_time <- seq(1880, 2030)
# solution <- data.frame(ode(times = sample_time,  func = ode.func,
#                            y = inits, parms = optimum_parameters,
#                            method="lsodes",rtol = 1e-5, atol = 1e-5))
#
# write.csv(solution, "Output.csv", row.names = F)
#
# plot(solution[,1], solution[,2])
# plot(df[,1], df[,2])
# plot(solution[,1], solution[,3])
# plot(df[,1], df[,3])
optimization
setwd("C:/Users/vassi/Documents/GitHub/Exploring_PINN/PBPK_Example")
getwd()
dose <- 18.15 # ug # Since results are in %ID we used a random dose that is within the dose range given to the rats
mass <- 263 #g, female Wistar Kyoto rats
# Load raw data from paper Kreyling et al.2017, which are given in %ID/g tissue
dose <- 18.15 # ug # Since results are in %ID we used a random dose that is within the dose range given to the rats
mass <- 263 #g, female Wistar Kyoto rats
df_percent <- openxlsx::read.xlsx("Kreyling-IV-data.xlsx", sheet = 6, colNames = T, rowNames = T) # TiO2 NPs %ID/g of tissue  (Table 1)
df_percent <- openxlsx::read.xlsx("Kreyling-IV-data.xlsx", sheet = 6, colNames = T, rowNames = T) # TiO2 NPs %ID/g of tissue  (Table 1)
excretion_percent <- openxlsx::read.xlsx("Kreyling-IV-data.xlsx", sheet = 3, colNames = T, rowNames = F) # accumulated excretory rate, expressed as %ID
# Drop the first time points because the graph is supposed to be cumulative dose but the cumulative feces in day 1 are less that the first time points
excretion_time <- round(excretion_percent[3:5,1])*24 # hours
# Convert doses from %ID to masses
df_all <- (df_percent/100) * dose # Concentrations in (ug of NPs)/(g of tissue)
# Drop unused compartments
df <- df_all[, !(names(df_all) %in% c("Uterus", "Brain", "Carcass"))]
excretion <- (excretion_percent[3:5,2]/100) * dose
df
excretion
excretion_percent <- openxlsx::read.xlsx("Kreyling-IV-data.xlsx", sheet = 3, colNames = T, rowNames = F) # accumulated excretory rate, expressed as %ID
excretion_percent
(excretion_percent[3:5,2]/100) * dose
